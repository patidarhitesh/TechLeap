using System;
using System.Collections.Generic;
using System.Linq;
using MongoDB.Driver;
using NoteService.Models;

namespace NoteService.Repository
{
    public class NoteRepository : INoteRepository
    {
        //define a private variable to represent NoteContext

        //define a private variable to represent NoteContext
        private readonly NoteContext context;
        public NoteRepository(NoteContext _context)
        {
            context = _context;
        }

        //This method should be used to create a new note. NoteId should be autogenerated and
        // must start with 101.This should create a new NotUser if not exists else should push 
        //new note entry into existing NoteUser collection. UserId is identified by CreatedBy
        public bool CreateNote(Note note)
        {
            var user = context.Notes.Find(u => u.UserId == note.CreatedBy).FirstOrDefault();
            if (user == null)
            {
                NoteUser noteuser = new NoteUser();
                noteuser.UserId = note.CreatedBy;
                noteuser.Notes = new List<Note>();
                note.Id = 101;
                note.CreationDate = DateTime.Now;
                noteuser.Notes.Add(note);
                context.Notes.InsertOne(noteuser);
            }
            else
            {
                note.Id = this.Getid(note.CreatedBy);
                note.CreationDate = DateTime.Now;
                var filter = Builders<NoteUser>.Filter.Eq(n => n.UserId, note.CreatedBy);
                var update = Builders<NoteUser>.Update.Push<Note>(n => n.Notes, note);
                context.Notes.FindOneAndUpdate(filter, update);
            }
            return true;
        }

        private int Getid(string createdBy)
        {
            var user = context.Notes.Find(c => c.UserId == createdBy).FirstOrDefault();
            List<Note> list = user.Notes;
            int Id = (list.Count == 0) ? 101 : list.Count + 101;
            return Id;
        }

        //This method should be used to retreive all notes for a user
        public List<Note> FindAllNotesByUser(string userId)
        {
            var user = context.Notes.Find(c => c.UserId == userId).FirstOrDefault();
            return user.Notes;
        }

        //This method should be used to delete a note for a specific user
        public bool DeleteNote(string userId, int noteId)
        {
            var filter = Builders<NoteUser>.Filter.Where(c => c.UserId == userId);
            var update = Builders<NoteUser>.Update.PullFilter(p => p.Notes, Builders<Note>.Filter.Where(c => c.Id == noteId));
            var updateResult = context.Notes.UpdateOne(filter, update);
            return updateResult.IsAcknowledged && updateResult.ModifiedCount > 0;
        }

        //This method is used to update an existing note for a user
        public bool UpdateNote(int noteId, string userId, Note note)
        {
            var filter = Builders<NoteUser>.Filter.Where(c => c.UserId == userId && c.Notes.Any(i => i.Id == noteId));
            var update = Builders<NoteUser>.Update.Set(c => c.Notes[-1], note);
            var updateResult = context.Notes.UpdateOne(filter, update);
            return updateResult.IsAcknowledged && updateResult.MatchedCount > 0;
        }
    }
}
