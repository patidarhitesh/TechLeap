using System;
using System.IO;
using System.Globalization;
using System.Text.RegularExpressions;
using DbEngine.Query;
using System.Collections.Generic;
using DbEngine.Query.Parser;

namespace DbEngine.Reader
{
    //This class will read from CSV file and process and return the resultSet
    public class CsvQueryProcessor: QueryProcessingEngine
    {
        /*
	    parameterized constructor to initialize filename. As you are trying to
	    perform file reading, hence you need to be ready to handle the IO Exceptions.
	   */
        public CsvQueryProcessor(string fileName)
        {
        }

        /*
	    implementation of getHeader() method. We will have to extract the headers
	    from the first line of the file.
	    */
        public override Header GetHeader()
        {
            return null;
        }

        /*
	     implementation of getColumnType() method. To find out the data types, we will
	     read the first line from the file and extract the field values from it. In
	     the previous assignment, we have tried to convert a specific field value to
	     Integer or Double. However, in this assignment, we are going to use Regular
	     Expression to find the appropriate data type of a field. Integers: should
	     contain only digits without decimal point Double: should contain digits as
	     well as decimal point Date: Dates can be written in many formats in the CSV
	     file. However, in this assignment,we will test for the following date
	     formats('dd/mm/yyyy','mm/dd/yyyy','dd-mon-yy','dd-mon-yyyy','dd-month-yy','dd-month-yyyy','yyyy-mm-dd')
	    */
        public override DataTypeDefinitions GetColumnType() 
        {
            return null;
        }

        //This method will be used in the upcoming assignments
        public override DataSet GetDataRow(QueryParameter queryParameter)
        {

            /*
		 * check for multiple conditions in where clause for eg: where salary>20000 and
		 * city=Bangalore for eg: where salary>20000 or city=Bangalore and dept!=Sales
		 */

            /*
             * if the overall condition expression evaluates to true, then we need to check
             * if all columns are to be selected(select *) or few columns are to be
             * selected(select col1,col2). In either of the cases, we will have to populate
             * the row map object. Row Map object is having type <String,String> to contain
             * field name and field value for the selected fields. Once the row object is
             * populated, add it to DataSet Map Object. DataSet Map object is having type
             * <Long,Row> to hold the rowId (to be manually generated by incrementing a Long
             * variable) and it's corresponding Row Object.
             */

            /*
             * check for the existence of Order By clause in the Query Parameter Object. if
             * it contains an Order By clause, implement sorting of the dataSet
             */

            /* return dataset object */

            return null;
        }
        
    }
}